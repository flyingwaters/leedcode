class Solution {
public:
//动态规划要保证子问题先行解决
//子串长度为1,2的子串[i,i],[i,i+1],数组遍历
//级别小的子问题好判断，大问题与子问题具有相关性。使用一个数组记录，减少了重复的判断。
//子串为3以后的子串，再行动态规划。

   string longestPalindrome(string s) {//1
    int a[s.length()][s.length()];
    int i,j,amount=1;
    int len,start=0;
    for(i=0;i<s.length();i++)
    for(j=0;j<s.length();j++)
    a[i][j]=0;
    //初始化为【0】
    for(i=0;i<s.length();i++)
    {a[i][i]=1;}
    //动态子问题容易判断先行1；
    for(i=0;i<s.length()-1;i++)
    {if(s[i]==s[i+1])
        {a[i][i+1]=1;amount=2;start=i;
        }
       else{ a[i][i+1]=0;}
    }//endfor
    //先行2
    
    //子问题由小到大，进行得到最后答案。
    
    for(len=3;len<=s.length();len++)
    for( i=0;i<=s.length()-len;i++)//子字符串首
           //子字符串尾
           {//11
                if((s[i]==s[i+len-1])&&a[i+1][i+len-2])   
                {
                    a[i][i+len-1]=1;
                    //子问题入表
                      if(len>amount)
                    {
                        amount=len;
                        start=i;
                       
                    }
                  }//endif
                  else{a[i][i+len-1]=0;}
                    //优化解更新。
                //endif
               }//11end forfor
           
          return s.substr(start,amount);
           
              
           }
};
