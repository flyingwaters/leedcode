/*
struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
			val(x), next(NULL) {
	}
};*/
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        ListNode* head;
        auto p=head;
        
       /* #
       一个返回头指针，一个迭代指针，
     */
        if(pHead1==nullptr)return pHead2;
        if(pHead2==nullptr)return pHead1;
        head = pHead1->val > pHead2->val?pHead2:pHead1;
        if(head==pHead1)pHead1=pHead1->next;
        if(head==pHead2)pHead2 = pHead2->next;
        p=head;
        while(pHead1!=nullptr&&pHead2!=nullptr){
             if(pHead2->val <= pHead1->val)
             {
                 head->next = pHead2;
                 pHead2 = pHead2->next;
                 head=head->next;
                 continue;
             }
              else {
                head->next = pHead1;
                pHead1 = pHead1->next;
                head = head->next;
               continue;}
        }
        if(pHead1!=nullptr)head->next = pHead1;
        if(pHead2!=nullptr)head->next = pHead2; 
        return p;
    }
};


**************************************************
class Solution {
public:
    ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
    {
        if(pHead1 == NULL || pHead2 == NULL)
            return pHead1 != NULL ? pHead1 : pHead2;
         
        ListNode* head = NULL;
         
        if(pHead1->val < pHead2->val)
        {
            head = pHead1;
            head->next = Merge(pHead1->next,pHead2);
        }
        else
        {
            head = pHead2;
            head->next = Merge(pHead1,pHead2->next);
        }
        return head;
    }
};
////
经典的递归手法，大问题化为小问题
