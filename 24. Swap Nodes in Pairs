Given a linked list, swap every two adjacent nodes and return its head.
For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.
Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
       if(head == nullptr)return head;
        if(head->next==nullptr)return head;
        ///短的特例
        auto res = head->next;
     while(head->next!=nullptr&&head!=nullptr)
     {
        auto headA = head;
        if(head->next->next==nullptr){swapThree(headA);break;}///////结尾的方式是不同的
        else if(head->next->next->next==nullptr){swapOne(headA);break;}//////结尾的方式是不同的，处理方法是有区分的，我们应用了分类的思想
        else{
            head = head->next->next;
            swapTwo(headA);
        }
     }  
        return res;
    }
      void swapOne(ListNode* H)
    {
        auto mark = H->next->next;
        H->next->next = H;
        H->next = mark;
        mark->next = nullptr;
    }
    void swapTwo(ListNode* H)
    {
        auto mark = H->next->next; 
        H->next->next = H; 
        H->next = mark->next;
    }
      void swapThree(ListNode* H)
    {
        H->next->next = H;
        H->next = nullptr;
    }
};
