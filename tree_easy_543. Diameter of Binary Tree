/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        return dfs(root);
    }
    //return the longest length
    int dfs(TreeNode* root){
        if(root == nullptr)return 0;
        int left,right;
        if(root->left == nullptr){
            left = 0;
        }
        else{ left = cfs(root->left)+1; }
        if(root->right == nullptr){
            right = 0;
        }
        else{
            right = cfs(root->right)+1;
        }
        int A = max(right+left,dfs(root->left));
        return max(A,dfs(root->right));
        
    }
    int cfs(TreeNode* root)
    {
        if(root==nullptr)return 0;
        int res=-1;
        queue<TreeNode*> q;
        q.push(root);
        //加入根节点
        while(q.size())
        {
            res++;
            int mark = q.size();
            while(mark--)
            {
                auto a = q.front();
                q.pop();
                if(a->left!=nullptr){
                    q.push(a->left);
                }
                if(a->right!=nullptr){
                    q.push(a->right);
                }
            }     
        }
        return res;
        //root __ 树的深度
    }
};
********************************************************************
//深度遍历求depth；beat 19per，快了一些----while，理论复杂度应该是一样的
class Solution {
public:
int diameterOfBinaryTree(TreeNode* root) {
    if(root == nullptr) return 0;
    int res = depth(root->left) + depth(root->right);
    return max(res, max(diameterOfBinaryTree(root->left), diameterOfBinaryTree(root->right)));
}

int depth(TreeNode* root){
    if(root == nullptr) return 0;
    return 1 + max(depth(root->left), depth(root->right));
}
};
///////////////////////////////////////////////////////////////////////////////////
/求解递归过程中最大的，maxdiapeth即可，每一个子树都会更新比较这个全局变量，最后遍历结束时我们得到最优解。仅仅需要深度遍历一遍
/
/
/
/
/
/

class Solution {
public:
    int maxdiadepth = 0;
    
    int dfs(TreeNode* root){        
        if(root == NULL) return 0;
        
        int leftdepth = dfs(root->left);
        int rightdepth = dfs(root->right);
        
        if(leftdepth + rightdepth > maxdiadepth) maxdiadepth = leftdepth + rightdepth;
        return max(leftdepth +1, rightdepth + 1);     
    }
    
    int diameterOfBinaryTree(TreeNode* root) {        
        dfs(root);
        
        return maxdiadepth;
    }
};
